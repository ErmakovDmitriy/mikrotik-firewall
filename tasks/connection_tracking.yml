---
- name: "Setting conntrack enabled={{ mikrotik_firewall.connection_tracking.enabled }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get enabled] != "{{ mikrotik_firewall.connection_tracking.enabled }}") do={
        :put "changed";
        :put "connection_tracking.enabled";
        /ip firewall connection tracking set enabled={{ mikrotik_firewall.connection_tracking.enabled }};
      } else={
        :put "not_changed";
        :put "connection_tracking.enabled";
      }
  when: mikrotik_firewall.connection_tracking.enabled is defined
  register: enabled
  changed_when: enabled.stdout_lines[0][-2] is defined and enabled.stdout_lines[0][-2] == "changed"
  failed_when: enabled.stdout_lines[0][-1] is defined and enabled.stdout_lines[0][-1] != "connection_tracking.enabled"

- name: "Setting tcp-syn-sent-timeout={{ mikrotik_firewall.connection_tracking.tcp_syn_sent_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get tcp-syn-sent-timeout] != {{ mikrotik_firewall.connection_tracking.tcp_syn_sent_timeout }}) do={
        :put "changed";
        :put "connection_tracking.tcp_syn_sent_timeout";
        /ip firewall connection tracking set tcp-syn-sent-timeout={{ mikrotik_firewall.connection_tracking.tcp_syn_sent_timeout }};
      } else={
        :put "not_changed";
        :put "connection_tracking.tcp_syn_sent_timeout";
      }
  when: mikrotik_firewall.connection_tracking.tcp_syn_sent_timeout is defined
  register: tcp_syn_sent_timeout
  changed_when: tcp_syn_sent_timeout.stdout_lines[0][-2] is defined and tcp_syn_sent_timeout.stdout_lines[0][-2] == "changed"
  failed_when: tcp_syn_sent_timeout.stdout_lines[0][-1] is defined and tcp_syn_sent_timeout.stdout_lines[0][-1] != "connection_tracking.tcp_syn_sent_timeout"

- name: "Setting tcp-syn-received-timeout={{ mikrotik_firewall.connection_tracking.tcp_syn_received_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get tcp-syn-received-timeout] != {{ mikrotik_firewall.connection_tracking.tcp_syn_received_timeout }}) do={
        :put "changed";
        :put "connection_tracking.tcp_syn_received_timeout";
        /ip firewall connection tracking set tcp-syn-received-timeout={{ mikrotik_firewall.connection_tracking.tcp_syn_received_timeout }};
      } else={
        :put "not_changed";
        :put "connection_tracking.tcp_syn_received_timeout";
      }
  when: mikrotik_firewall.connection_tracking.tcp_syn_received_timeout is defined
  register: tcp_syn_received_timeout
  changed_when: tcp_syn_received_timeout.stdout_lines[0][-2] is defined and tcp_syn_received_timeout.stdout_lines[0][-2] == "changed"
  failed_when: tcp_syn_received_timeout.stdout_lines[0][-1] is defined and tcp_syn_received_timeout.stdout_lines[0][-1] != "connection_tracking.tcp_syn_received_timeout"

- name: "Setting tcp-established-timeout={{ mikrotik_firewall.connection_tracking.tcp_established_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get tcp-established-timeout] != {{ mikrotik_firewall.connection_tracking.tcp_established_timeout }}) do={
        :put "changed";
        :put "connection_tracking.tcp_established_timeout";
        /ip firewall connection tracking set tcp-established-timeout={{ mikrotik_firewall.connection_tracking.tcp_established_timeout }};
      } else={
        :put "not_changed";
        :put "connection_tracking.tcp_established_timeout";
      }
  when: mikrotik_firewall.connection_tracking.tcp_established_timeout is defined
  register: tcp_established_timeout
  changed_when: tcp_established_timeout.stdout_lines[0][-2] is defined and tcp_established_timeout.stdout_lines[0][-2] == "changed"
  failed_when: tcp_established_timeout.stdout_lines[0][-1] is defined and tcp_established_timeout.stdout_lines[0][-1] != "connection_tracking.tcp_established_timeout"

- name: "Setting tcp-fin-wait-timeout={{ mikrotik_firewall.connection_tracking.tcp_fin_wait_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get tcp-fin-wait-timeout] != {{ mikrotik_firewall.connection_tracking.tcp_fin_wait_timeout }}) do={
        :put "changed";
        :put "connection_tracking.tcp_fin_wait_timeout";
        /ip firewall connection tracking set tcp-fin-wait-timeout={{ mikrotik_firewall.connection_tracking.tcp_fin_wait_timeout }};
      } else={
        :put "not_changed";
        :put "connection_tracking.tcp_fin_wait_timeout";
      }
  when: mikrotik_firewall.connection_tracking.tcp_fin_wait_timeout is defined
  register: tcp_fin_wait_timeout
  changed_when: tcp_fin_wait_timeout.stdout_lines[0][-2] is defined and tcp_fin_wait_timeout.stdout_lines[0][-2] == "changed"
  failed_when: tcp_fin_wait_timeout.stdout_lines[0][-1] is defined and tcp_fin_wait_timeout.stdout_lines[0][-1] != "connection_tracking.tcp_fin_wait_timeout"

- name: "Setting tcp-close-wait-timeout={{ mikrotik_firewall.connection_tracking.tcp_close_wait_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get tcp-close-wait-timeout] != {{ mikrotik_firewall.connection_tracking.tcp_close_wait_timeout }}) do={
        :put "changed";
        :put "connection_tracking.tcp_close_wait_timeout";
        /ip firewall connection tracking set tcp-close-wait-timeout={{ mikrotik_firewall.connection_tracking.tcp_close_wait_timeout }} ;
      } else={
        :put "not_changed";
        :put "connection_tracking.tcp_close_wait_timeout";
      }
  when: mikrotik_firewall.connection_tracking.tcp_close_wait_timeout is defined
  register: tcp_close_wait_timeout
  changed_when: tcp_close_wait_timeout.stdout_lines[0][-2] is defined and tcp_close_wait_timeout.stdout_lines[0][-2] == "changed"
  failed_when: tcp_close_wait_timeout.stdout_lines[0][-1] is defined and tcp_close_wait_timeout.stdout_lines[0][-1] != "connection_tracking.tcp_close_wait_timeout"

- name: "Setting tcp-last-ack-timeout={{ mikrotik_firewall.connection_tracking.tcp_last_ack_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get tcp-last-ack-timeout] != {{ mikrotik_firewall.connection_tracking.tcp_last_ack_timeout }}) do={
        :put "changed";
        :put "connection_tracking.tcp_last_ack_timeout";
        /ip firewall connection tracking set tcp-last-ack-timeout={{ mikrotik_firewall.connection_tracking.tcp_last_ack_timeout }};
      } else={
        :put "not_changed";
        :put "connection_tracking.tcp_last_ack_timeout";
      }
  when: mikrotik_firewall.connection_tracking.tcp_last_ack_timeout is defined
  register: tcp_last_ack_timeout
  changed_when: tcp_last_ack_timeout.stdout_lines[0][-2] is defined and tcp_last_ack_timeout.stdout_lines[0][-2] == "changed"
  failed_when: tcp_last_ack_timeout.stdout_lines[0][-1] is defined and tcp_last_ack_timeout.stdout_lines[0][-1] != "connection_tracking.tcp_last_ack_timeout"

- name: "Setting tcp-time-wait-timeout={{ mikrotik_firewall.connection_tracking.tcp_time_wait_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get tcp-time-wait-timeout] != {{ mikrotik_firewall.connection_tracking.tcp_time_wait_timeout }}) do={
        :put "changed";
        :put "connection_tracking.tcp_time_wait_timeout";
        /ip firewall connection tracking set tcp-time-wait-timeout={{ mikrotik_firewall.connection_tracking.tcp_time_wait_timeout }};
      } else={
        :put "not_changed";
        :put "connection_tracking.tcp_time_wait_timeout";
      }
  when: mikrotik_firewall.connection_tracking.tcp_time_wait_timeout is defined
  register: tcp_time_wait_timeout
  changed_when: tcp_time_wait_timeout.stdout_lines[0][-2] is defined and tcp_time_wait_timeout.stdout_lines[0][-2] == "changed"
  failed_when: tcp_time_wait_timeout.stdout_lines[0][-1] is defined and tcp_time_wait_timeout.stdout_lines[0][-1] != "connection_tracking.tcp_time_wait_timeout"

- name: "Setting tcp-close-timeout={{ mikrotik_firewall.connection_tracking.tcp_close_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get tcp-close-timeout] != {{ mikrotik_firewall.connection_tracking.tcp_close_timeout }}) do={
        :put "changed";
        :put "connection_tracking.tcp_close_timeout";
        /ip firewall connection tracking set tcp-close-timeout={{ mikrotik_firewall.connection_tracking.tcp_close_timeout }};
      } else={
        :put "not_changed";
        :put "connection_tracking.tcp_close_timeout";
      }
  when: mikrotik_firewall.connection_tracking.tcp_close_timeout is defined
  register: tcp_close_timeout
  changed_when: tcp_close_timeout.stdout_lines[0][-2] is defined and tcp_close_timeout.stdout_lines[0][-2] == "changed"
  failed_when: tcp_close_timeout.stdout_lines[0][-1] is defined and tcp_close_timeout.stdout_lines[0][-1] != "connection_tracking.tcp_close_timeout"

- name: "Setting tcp-max-retrans-timeout={{ mikrotik_firewall.connection_tracking.tcp_max_retrans_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get tcp-max-retrans-timeout] != {{ mikrotik_firewall.connection_tracking.tcp_max_retrans_timeout }}) do={
        :put "changed";
        :put "connection_tracking.tcp_max_retrans_timeout";
        /ip firewall connection tracking set tcp-max-retrans-timeout={{ mikrotik_firewall.connection_tracking.tcp_max_retrans_timeout }};
      } else={
        :put "not_changed";
        :put "connection_tracking.tcp_max_retrans_timeout";
      }
  when: mikrotik_firewall.connection_tracking.tcp_max_retrans_timeout is defined
  register: tcp_max_retrans_timeout
  changed_when: tcp_max_retrans_timeout.stdout_lines[0][-2] is defined and tcp_max_retrans_timeout.stdout_lines[0][-2] == "changed"
  failed_when: tcp_max_retrans_timeout.stdout_lines[0][-1] is defined and tcp_max_retrans_timeout.stdout_lines[0][-1] != "connection_tracking.tcp_max_retrans_timeout"

- name: "Setting tcp-unacked-timeout={{ mikrotik_firewall.connection_tracking.tcp_unacked_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get tcp-unacked-timeout] != {{ mikrotik_firewall.connection_tracking.tcp_unacked_timeout }}) do={
        :put "changed";
        :put "connection_tracking.tcp_unacked_timeout";
        /ip firewall connection tracking set tcp-unacked-timeout={{ mikrotik_firewall.connection_tracking.tcp_unacked_timeout }};
      } else={
        :put "not_changed";
        :put "connection_tracking.tcp_unacked_timeout";
      }
  when: mikrotik_firewall.connection_tracking.tcp_unacked_timeout is defined
  register: tcp_unacked_timeout
  changed_when: tcp_unacked_timeout.stdout_lines[0][-2] is defined and tcp_unacked_timeout.stdout_lines[0][-2] == "changed"
  failed_when: tcp_unacked_timeout.stdout_lines[0][-1] is defined and tcp_unacked_timeout.stdout_lines[0][-1] != "connection_tracking.tcp_unacked_timeout"

- name: "Setting udp-timeout={{ mikrotik_firewall.connection_tracking.udp_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get udp-timeout] != {{ mikrotik_firewall.connection_tracking.udp_timeout }}) do={
        :put "changed";
        :put "connection_tracking.udp_timeout";
        /ip firewall connection tracking set udp-timeout={{ mikrotik_firewall.connection_tracking.udp_timeout }};
      } else={
         :put "not_changed";
         :put "connection_tracking.udp_timeout";
      }
  when: mikrotik_firewall.connection_tracking.udp_timeout is defined
  register: udp_timeout
  changed_when: udp_timeout.stdout_lines[0][-2] is defined and udp_timeout.stdout_lines[0][-2] == "changed"
  failed_when: udp_timeout.stdout_lines[0][-1] is defined and udp_timeout.stdout_lines[0][-1] != "connection_tracking.udp_timeout"

- name: "Setting udp-stream-timeout={{ mikrotik_firewall.connection_tracking.udp_stream_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get udp-stream-timeout] != {{ mikrotik_firewall.connection_tracking.udp_stream_timeout }}) do={
        :put "changed";
        :put "connection_tracking.udp_stream_timeout";
        /ip firewall connection tracking set udp-stream-timeout={{ mikrotik_firewall.connection_tracking.udp_stream_timeout }};
      } else={
        :put "not_changed";
        :put "connection_tracking.udp_stream_timeout";
      }
  when: mikrotik_firewall.connection_tracking.udp_stream_timeout is defined
  register: udp_stream_timeout
  changed_when: udp_stream_timeout.stdout_lines[0][-2] is defined and udp_stream_timeout.stdout_lines[0][-2] == "changed"
  failed_when: udp_stream_timeout.stdout_lines[0][-1] is defined and udp_stream_timeout.stdout_lines[0][-1] != "connection_tracking.udp_stream_timeout"

- name: "Setting icmp-timeout={{ mikrotik_firewall.connection_tracking.icmp_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get icmp-timeout] != {{ mikrotik_firewall.connection_tracking.icmp_timeout }}) do={
        :put "changed";
        :put "connection_tracking.icmp_timeout";
        /ip firewall connection tracking set icmp-timeout={{ mikrotik_firewall.connection_tracking.icmp_timeout }};
      } else={
        :put "not_changed";
        :put "connection_tracking.icmp_timeout";
      }
  when: mikrotik_firewall.connection_tracking.icmp_timeout is defined
  register: icmp_timeout
  changed_when: icmp_timeout.stdout_lines[0][-2] is defined and icmp_timeout.stdout_lines[0][-2] == "changed"
  failed_when: icmp_timeout.stdout_lines[0][-1] is defined and icmp_timeout.stdout_lines[0][-1] != "connection_tracking.icmp_timeout"

- name: "Setting generic-timeout={{ mikrotik_firewall.connection_tracking.generic_timeout }}"
  routeros_command:
    commands: |
      :if ([/ip firewall connection tracking get generic-timeout] != {{ mikrotik_firewall.connection_tracking.generic_timeout }}) do={
        :put "changed";
        :put "connection_tracking.generic_timeout";
        /ip firewall connection tracking set generic-timeout={{ mikrotik_firewall.connection_tracking.generic_timeout }};
      } else={
        :put "not_changed";
        :put "connection_tracking.generic_timeout";
      }
  when: mikrotik_firewall.connection_tracking.generic_timeout is defined
  register: generic_timeout
  changed_when: generic_timeout.stdout_lines[0][-2] is defined and generic_timeout.stdout_lines[0][-2] == "changed"
  failed_when: generic_timeout.stdout_lines[0][-1] is defined and generic_timeout.stdout_lines[0][-1] != "connection_tracking.generic_timeout"
